# -*- coding: utf-8 -*-
"""Final_ Chatgpt_embedding_24-04-23.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mqoniFuGKhhlXFB4ZATAHV2hj4NyLWBd
"""

!pip install openai
!pip install tiktoken

pip install 'PyPDF2<3.0'

from PyPDF2 import PdfReader

def extract_text_from_pdf(file_path):
    with open(file_path, 'rb') as pdf_file:
        pdf_reader = PdfReader(pdf_file)
        text = ''
        for page in pdf_reader.pages:
            page_text = page.extract_text()
            text += page_text
        return text

from google.colab import drive
drive.mount('/content/drive')

pdf_text = extract_text_from_pdf('/content/drive/MyDrive/Bert_qa/books/EMPLOYEE REFERRAL PROGRAMME.pdf')
# print(pdf_text)

import openai

openai.api_key = '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'
COMPLETIONS_MODEL = 'text-davinci-002'

def answer_question(question):
    prompt = f"""Answer the question as truthfully as possible using the provided text, and if the answer is not contained within the text below, say "I don't know"
    {pdf_text}
    Q: {question}
    A:"""

    response = openai.Completion.create(
        prompt=prompt,
        temperature=0,
        max_tokens=300,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0,
        model=COMPLETIONS_MODEL
    )

    return response.choices[0].text.strip(" \n")

"""### **Making Flask app**"""

!pip install pyngrok==4.1.1
!pip install flask-ngrok
!ngrok authtoken '2Le44pvutA12CVeDWSAkt5G3UMN_id5HkVSrU5c2wkyuXrEF'

from flask import Flask, redirect, render_template, request, url_for
from flask import Flask, jsonify, request
from flask_ngrok import run_with_ngrok

#Set path
import os
os.chdir(r"/content/drive/MyDrive/Bert_qa")

# Initializing Flask Application
app = Flask(__name__)
run_with_ngrok(app)
# List to store previous responses
previous_responses = []

@app.route("/", methods=("GET", "POST"))
def index():
    if request.method == "POST":
        # Get input string string from the form
        input_string = request.form["input_string"]
        question = input_string

        ans = answer_question(question)

        # Redirect to the same page with the new response
        return redirect(url_for("index", result=ans))

    # Get the result from the query parameters
    result = request.args.get("result")

    # Render the index.html template with the result
    return render_template("index.html", result=result)# importing necessary libraries

if __name__ == '__main__':
  app.run()